import { Project } from './ci/project';
import { upload as _upload } from './ci/upload';
import { preview as _preview } from './ci/preview';
import { getDevSourceMap as _getDevSourceMap } from './ci/getDevSourceMap';
import { packNpm, packNpmManually } from './core/npm/packnpm';
import { setCiProxy as proxy } from './utils/request';
import { uploadFunction } from './cloud/uploadFunction';
import { createTimeTrigger } from './cloud/createTimeTrigger';
import { uploadContainer } from './cloud/uploadContainer';
import { IUploadOptions } from './cloud/uploadFile';
import { uploadJsServer } from './ci/jsserver';
import { analyseCode } from './ci/code-analyse';
import { getCompiledResult } from './ci/getCompiledResult';
import { getLatestVersion } from './ci/getLatestVersion';
export { Project };
export type { IUploadOptions };
export declare const upload: typeof _upload;
export declare const preview: typeof _preview;
export { getCompiledResult };
export { packNpm };
export { packNpmManually };
export { proxy };
export declare const getDevSourceMap: typeof _getDevSourceMap;
export declare const cloud: {
    uploadFunction: typeof uploadFunction;
    createTimeTrigger: typeof createTimeTrigger;
    uploadStaticStorage: (options: IUploadOptions) => Promise<void>;
    uploadStorage: (options: IUploadOptions) => Promise<void>;
    uploadContainer: typeof uploadContainer;
};
export { uploadJsServer };
export { getLatestVersion };
export { analyseCode };
export * from './core';
export * from './summer';
